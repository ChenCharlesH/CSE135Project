# Coalesces similar purchases made by same users and has same product id.
coal = SELECT p.user_id, p.product_id, COUNT(*) FROM Purchases p GROUP BY p.user_id, p.product_id;

# Joins table with user_id with users table.
up = SELECT u.unique_name FROM Users u LEFT JOIN Purchases p ON u.id = p.user;

# Full thing:
SELECT user_purch.unique_name, prod.unique_name, prod.price, user_purch.quantity
FROM
	(
		SELECT u.unique_name, u.id, coal.product, coal.quantity
		FROM
		Users u
		LEFT JOIN
		(
			SELECT purchin.user, purchin.product, SUM(purchin.quantity)
			FROM Purchases purchin
			GROUP BY purchin.user, purchin.product
		) as coal
		ON coal.user = u.id
	)
	AS user_purch
FULL OUTER JOIN Products prod
ON user_purch.product = prod.id;

# Version Two:
SELECT up.user_unique_name, up.product_unique_name, up.price, coal.quantity
FROM
(
	SELECT u.unique_name as user_unique_name, p.unique_name as product_unique_name,
				 u.id AS user_id, p.id AS product_id, p.price as price
	FROM
		(
      SELECT ui.unique_name, ui.id
      FROM Users ui
      WHERE ui.id IN (val)
    ) AS u,
    (
      SELECT pi.unique_name, pi.id, pi.price
      FROM Products pi
      WHERE pi.id IN (val)
    )AS p
  LIMIT 10
) AS up
FULL OUTER JOIN
(
	SELECT purchin.user, purchin.product, SUM(purchin.quantity) AS quantity
	FROM Purchases purchin
	GROUP BY purchin.user, purchin.product
) AS coal
ON
up.user_id = coal.user AND
up.product_id = coal.product
ORDER BY up.user_id;



# You can then multiply price by quantity to get each matrix element.
