# Coalesces similar purchases made by same users and has same product id.
coal = SELECT p.user_id, p.product_id, COUNT(*) FROM Purchases p GROUP BY p.user_id, p.product_id;

# Joins table with user_id with users table.
up = SELECT u.unique_name FROM Users u LEFT JOIN Purchases p ON u.id = p.user;

# Full thing:
SELECT user_purch.unique_name, prod.unique_name, prod.price, user_purch.quantity
FROM
  (
    SELECT u.unique_name, u.id, coal.product, coal.quantity
    FROM
    Users u
    LEFT JOIN
    (
      SELECT purchin.user, purchin.product, SUM(purchin.quantity)
      FROM Purchases purchin
      GROUP BY purchin.user, purchin.product
    ) as coal
    ON coal.user = u.id
  )
  AS user_purch
FULL OUTER JOIN Products prod
ON user_purch.product = prod.id;

# Version Two:
SELECT up.user_unique_name, up.product_unique_name, up.price, coal.quantity
FROM
(
  SELECT u.unique_name as user_unique_name, p.unique_name as product_unique_name,
         u.id AS user_id, p.id AS product_id, p.price as price
  FROM
    (
      SELECT ui.unique_name, ui.id
      FROM Users ui
      WHERE ui.id IN (val)
    ) AS u,
    (
      SELECT pi.unique_name, pi.id, pi.price
      FROM Products pi
      WHERE pi.id IN (val)
    )AS p
  LIMIT 10
) AS up
FULL OUTER JOIN
(
  SELECT purchin.user, purchin.product, SUM(purchin.quantity) AS quantity
  FROM Purchases purchin
  GROUP BY purchin.user, purchin.product
) AS coal
ON
up.user_id = coal.user AND
up.product_id = coal.product
ORDER BY up.user_id;

# You can then multiply price by quantity to get each matrix element.

# Similar Products:
WITH setw AS (
  SELECT sales.uid AS uid, sales.pid as pid, sales.total AS total
  FROM
  (
    SELECT up.user_id as uid, up.product_id as pid, (up.price * coal.quantity) as total
    FROM
    (
      SELECT u.unique_name as user_unique_name, p.unique_name as product_unique_name,
             u.id AS user_id, p.id AS product_id, p.price as price
      FROM Users u, Products p
    ) AS up
    LEFT OUTER JOIN
    (
      SELECT purchin.user, purchin.product, SUM(purchin.quantity) AS quantity
      FROM Purchases purchin
      GROUP BY purchin.user, purchin.product
    ) AS coal
    ON
    up.user_id = coal.user AND
    up.product_id = coal.product
  ) AS sales
)
SELECT *
FROM
(
  SELECT summing.pidO, summing.pidT, (summing.num / (SQRT(summing.denom1) * SQRT(summing.denom2))) as cosine
  FROM
  (
    SELECT rows.pidO, rows.pidT,
           CAST(SUM(rows.mult) AS float) AS num,
           CAST(SUM(rows.prodOMult) AS float) AS denom1,
           CAST(SUM(rows.prodTMult) AS float) AS denom2
    FROM
    (
      SELECT prodO.pid AS pidO, prodT.pid AS pidT,
             (prodO.total * prodO.total) AS prodOMult,
             (prodT.total * prodT.total) AS prodTMult,
             (prodO.total * prodT.total) AS mult
      FROM setw AS prodO
      LEFT OUTER JOIN setw AS prodT
      ON prodO.uid = prodT.uid
    ) AS rows
    GROUP BY rows.pidO, rows.pidT
  ) as summing
) as ordered
ORDER BY cosine
